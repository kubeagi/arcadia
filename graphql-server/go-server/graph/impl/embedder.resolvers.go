package impl

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"strings"

	"github.com/kubeagi/arcadia/graphql-server/go-server/graph/generated"
	"github.com/kubeagi/arcadia/graphql-server/go-server/pkg/auth"
	"github.com/kubeagi/arcadia/graphql-server/go-server/pkg/client"
	defaultobject "github.com/kubeagi/arcadia/graphql-server/go-server/pkg/default_object"
	"github.com/kubeagi/arcadia/graphql-server/go-server/pkg/embedder"
)

// CreateEmbedder is the resolver for the createEmbedder field.
func (r *embedderMutationResolver) CreateEmbedder(ctx context.Context, obj *generated.EmbedderMutation, input generated.CreateEmbedderInput) (*generated.Embedder, error) {
	token := auth.ForOIDCToken(ctx)
	c, err := client.GetClient(token)
	if err != nil {
		return &defaultobject.DefaultEmbedder, err
	}

	url, authSecret, displayname, description, servicetype := "", "", "", "", ""
	if input.Endpointinput != nil {
		if input.Endpointinput.URL != nil {
			url = *input.Endpointinput.URL
		}
		if input.Endpointinput.AuthSecret.Name != "" {
			authSecret = input.Endpointinput.AuthSecret.Name
		}
	}

	if input.DisplayName != "" {
		displayname = input.DisplayName
	}
	if input.Description != nil {
		description = *input.Description
	}
	if input.ServiceType != nil {
		servicetype = *input.ServiceType
	}
	return embedder.CreateEmbedder(ctx, c, input.Name, input.Namespace, url, authSecret, displayname, description, servicetype)
}

// UpdateEmbedder is the resolver for the updateEmbedder field.
func (r *embedderMutationResolver) UpdateEmbedder(ctx context.Context, obj *generated.EmbedderMutation, input *generated.UpdateEmbedderInput) (*generated.Embedder, error) {
	token := auth.ForOIDCToken(ctx)
	c, err := client.GetClient(token)
	if err != nil {
		return &defaultobject.DefaultEmbedder, err
	}
	name, displayname := "", ""
	if input.DisplayName != "" {
		displayname = input.DisplayName
	}
	if input.Name != "" {
		name = input.Name

	}
	return embedder.UpdateEmbedder(ctx, c, name, input.Namespace, displayname)
}

// DeleteEmbedder is the resolver for the deleteEmbedder field.
func (r *embedderMutationResolver) DeleteEmbedder(ctx context.Context, obj *generated.EmbedderMutation, input *generated.DeleteEmbedderInput) (*string, error) {
	token := auth.ForOIDCToken(ctx)
	c, err := client.GetClient(token)
	if err != nil {
		return &defaultobject.DefaultString, err
	}
	name := ""
	labelSelector, fieldSelector := "", ""
	if input.Name != nil {
		name = *input.Name
	}
	if input.FieldSelector != nil {
		fieldSelector = *input.FieldSelector
	}
	if input.LabelSelector != nil {
		labelSelector = *input.LabelSelector
	}
	return embedder.DeleteEmbedder(ctx, c, name, input.Namespace, labelSelector, fieldSelector)
}

// GetEmbedder is the resolver for the getEmbedder field.
func (r *embedderQueryResolver) GetEmbedder(ctx context.Context, obj *generated.EmbedderQuery, name string, namespace string) (*generated.Embedder, error) {
	token := auth.ForOIDCToken(ctx)
	c, err := client.GetClient(token)
	if err != nil {
		return &defaultobject.DefaultEmbedder, err
	}
	return embedder.ReadEmbedder(ctx, c, name, namespace)
}

// ListEmbedders is the resolver for the listEmbedders field.
func (r *embedderQueryResolver) ListEmbedders(ctx context.Context, obj *generated.EmbedderQuery, input generated.ListEmbedderInput) (*generated.PaginatedResult, error) {
	token := auth.ForOIDCToken(ctx)
	c, err := client.GetClient(token)
	if err != nil {
		return &defaultobject.DefaultPaginatedResult, err
	}
	name, displayName, labelSelector, fieldSelector := "", "", "", ""
	page, pageSize := 1, 10
	if input.Name != nil {
		name = *input.Name
	}
	if input.DisplayName != nil {
		displayName = *input.DisplayName
	}
	if input.FieldSelector != nil {
		fieldSelector = *input.FieldSelector
	}
	if input.LabelSelector != nil {
		labelSelector = *input.LabelSelector
	}
	if input.Page != nil && *input.Page > 0 {
		page = *input.Page
	}
	if input.PageSize != nil && *input.PageSize > 0 {
		pageSize = *input.PageSize
	}
	result, err := embedder.ListEmbedders(ctx, c, input.Namespace, labelSelector, fieldSelector)
	if err != nil {
		return &defaultobject.DefaultPaginatedResult, err
	}
	var filteredResult []generated.PageNode
	for idx, u := range result {
		if (name == "" || strings.Contains(u.Name, name)) && (displayName == "" || strings.Contains(u.DisplayName, displayName)) {
			filteredResult = append(filteredResult, result[idx])
		}
	}

	totalCount := len(filteredResult)
	end := page * pageSize
	if end > totalCount {
		end = totalCount
	}
	return &generated.PaginatedResult{
		TotalCount:  totalCount,
		HasNextPage: end < totalCount,
		Nodes:       filteredResult[(page-1)*pageSize : end],
	}, nil
}

// Embedder is the resolver for the Embedder field.
func (r *mutationResolver) Embedder(ctx context.Context) (*generated.EmbedderMutation, error) {
	return &generated.EmbedderMutation{}, nil
}

// Embedder is the resolver for the Embedder field.
func (r *queryResolver) Embedder(ctx context.Context) (*generated.EmbedderQuery, error) {
	return &generated.EmbedderQuery{}, nil
}

// EmbedderMutation returns generated.EmbedderMutationResolver implementation.
func (r *Resolver) EmbedderMutation() generated.EmbedderMutationResolver {
	return &embedderMutationResolver{r}
}

// EmbedderQuery returns generated.EmbedderQueryResolver implementation.
func (r *Resolver) EmbedderQuery() generated.EmbedderQueryResolver { return &embedderQueryResolver{r} }

type embedderMutationResolver struct{ *Resolver }
type embedderQueryResolver struct{ *Resolver }
